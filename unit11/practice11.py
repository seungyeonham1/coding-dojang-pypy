
# 값이 연속적으로 이어진 자료형 = 시퀀스 자료형
# list, tuple, range, str을 주로 사용함 bytes, bytearray라는 자료형도 있음 
# 시퀀스 자료형은 공통 동작과 기능을 제공함


# 시퀀스 객체 안에 특정 값이 있/없는지 확인

# in 연산자 
# 있으면 true / 없으면 false

a = [38, 76, 43, 62, 19]
print(43 in a) # a 리스트에 43이 있는지 확인 후 결과 출력
print(100 in a) # a 리스트에 100이 있는지 확인 후 결과 출력

# not in 연산자
# 없으면 true / 있으면 false

a = [0, 10, 20, 30, 40, 50]
print(100 not in a) # a 리스트에 100이 없는지 확인 후 결과 출력
print(30 not in a) # a 리스트에 30이 없는지 확인 후 결과 출력

# 튜플, range, 문자열에서도 활용이 가능함
a = 38, 76, 43, 62, 19
print(43 in (38, 76, 43, 62, 19))

print(1 in range(10)) 

b = 'Hello, Python'
print('P' in b)
print('A' in b)

# 시퀀스 객체 연결
# + 언산자로 시퀀스 객체를 연결할 수 있음
# a = [0, 10, 20, 30]
# b = [1, 2, 3, 4]
# print(a + b)

# 시퀀스 자료형 중 range는 연산자로 객체를 연결할 수 없음
# range(a,b) + range(c,d) =  range(a,b,c,d) >> 불가능
# 그래서 range를 리스트나 튜플로 만들어서 연결해야 함

# list(range(a,b)) + list(range(c,d)) >> 가능
print(list(range(0,10)) + list(range(10, 20)))
# tuple(range(a,b)) + tuple(range(c,d)) >> 가능
print(tuple(range(0, 10)) + tuple(range(10, 20)))

# 문자열은 +연산자로 여러 문자열을 연결할 수 있음
a = 'Hello, '
b = 'World'
print(a+b)

# 문자열에 숫자 연결하기
# '문자열' + str(정수) / '문자열' + str(실수)
a = 'hello, ' + str(10)
b = 'hello, ' + str(1.5)
print(a)
print(b)

# 시퀀스 객체 반복
# 시퀀스 객체 * 정수  
# [0, 10, 20 ,30] * 3  = [0, 10, 20, 30, 0, 10, 20, 30, 0, 10, 20, 30]
a = [0, 10, 20, 30] * 3
print(a)

# range 연산자로 반복하는 방법 = list나 튜플로 만들어서 반복
# list(range(0, 5, 2)) * 3
print(list(range(0, 5, 2)) * 3) # 0부터 5까지 2 증가폭을 가진 숫자(0, 2, 4)를 3번 반복한다. 

d = list(range(10, 0 , -1))
print(d * 3)

# 시퀀스 객체의 요소 개수 구하기
# len 함수 사용하기
# len(시퀀스객체)

a = [0, 10, 20, 30, 40, 50, 60]
print(len(a))

# range의 숫자 생성 개수 구하기
print(len(range(0, 10, 2))) # 0, 2, 4, 6, 8 = 5개

# 문자열의 길이 구하기
a = 'Hello, World!'
print(len(a))
b = '안녕하세요. 감사해요. 잘있어요. 다시 만나요.'
print(len(b))

# 인덱스 사용하기
# 시퀀스 객체[인덱스]
# 인덱스는 위칫값을 뜻함, 인덱스는 항상 0부터 시작


a = [0, 2, 4, 6, 8 ,12, 16]
print(a[0])
print(a[4])

# range도 인덱스로 접근 가능함

r = range(0, 10, 2) # 0, 2, 4, 6, 8
print(r[2])
print(r[-2])

# 음수 인덱스인 경우, 뒤에서부터 요소에 접근함
# a = [1, 2, 3, 4] /  a[-1] = 4
# range, 문자열도 음수 인덱스로 접근 가능

a = '안녕하세요. 감사해요!'
print(a[2])
print(a[-3])

# 시퀀스 객체에 인덱스를 지정하지 않으면 해당 객체 전체를 뜻함.

a = [0, 2, 4, 6, 9]
print(a) # 이처럼 인덱스를 지정하지 않으면 해당 객체 전체가 출력됨

# __getitem__ 메서드

a = [0, 2, 4, 6, 8]
print(a.__getitem__(1))


# 요소에 값 할당 하기
# a[0] = 1, a[1] = 2 ....

a = [0, 0, 0, 0, 0]
a[0] = 1
a[1] = 2
a[2] = 3
a[3] = 5
a[4] = 7
print(a)


# 요소 삭제 하기
# del 시퀀스 객체[인덱스]

a = [38, 21, 53, 62, 19]
del a[3]
print(a)

# list는 요소를 삭제할 수 있음. 하지만 튜플, range, 문자열은 저장된 요소를 삭제할 수 없음


# 슬라이스 사용하기 ':'
# 시퀀스 객체[시작인덱스:끝인덱스]

a = [0, 10, 20 ,30 ,40 ,50, 60 ,70]
print(a[0:3]) # 인덱스 0부터 3까지 새 리스트를 만들어서 출력
print(a[1:1])
print(a[1:2])
print(a[4:-2])
print(a[2:7:3]) # 인덱스 2부터 3씩 증가시키면서 인덱스 7까지 가져온 뒤, 출력

# 요소가 10개 있는 리스트를 처음부터 끝까지 가져오기
# a = [0,1,2,3,4,5]
# a[0,6] 인덱스 0부터 6까지 잘라서 새리스트를 만듬

# 인덱스의 증가폭
# 시퀀스 객체[시작인덱스:끝인덱스:인덱스증가폭]

# a = [0, 3, 5, 7, 9, 11, 13, 15, 17]
# print(a[2:7:2]) # 인덱스 2부터 2씩 증가시키면서 인덱스 7까지 가져온 뒤, 출력

# 인덱스 생략
# 시퀀스 객체[:끝인덱스]

# a = [0, 3, 5, 7, 9, 11, 13, 15, 17]
# print(a[:7]) # 리스트 처음부터 인덱스 6까지 가져온 뒤, 출력

# 시퀀스 객체[시작인덱스:]

# a = [0, 3, 5, 7, 9, 11, 13, 15, 17]
# print(a[2:]) # 인덱스 2부터 마지막 요소까지 가져온 뒤, 출력

# 인덱스 생략하면서 증가폭 사용하기
# 시퀀스 객체[:끝인덱스:증가폭] 리스트의 처음부터 인덱스를 증가폭만큼 증가시키면서 <끝인덱스-1> 까지 가져옴

# a = [0, 3, 5, 7, 9, 11, 13, 15, 17]
# print(a[:7:2]) # 리스트 처음부터 인덱스 2씩 증가시키면서 인덱스 6까지 가져온 뒤, 출력

# 시퀀스 객체[시작인덱스::증가폭] 시작인덱스부터 증가폭만큼 증가시키면서 리스트의 마지막 요소까지 가져옴

# a = [0, 3, 5, 7 ,9, 11, 13, 15, 17]
# print(a[6::2]) # 인덱스 6부터 2씩 증가시키면서 리스트의 마지막 요소까지 출력

# 시퀀스 객체[::증가폭] 리스트 전체에서 인덱스 0부터 증가폭만큼 증가시키면서 요소를 가져옴

# a = [0, 3, 5, 7 ,9, 11, 13, 15, 17]
# print(a[::2]) # 리스트 전체에서 인덱스 0부터 2씩 증가시키면서 리스트 마지막 요소까지 출력

# 시퀀스 객체[::] 와 시퀀스 객체[:]는 리스트 전체를 가져옴

# a = [0, 3, 5, 7 ,9, 11, 13, 15, 17]
# print(a[::]) # 리스트 전체를 가져온뒤, 출력

# 인덱스 증가폭을 음수로 지정한 경우
a = [0, 3, 5, 7 ,9, 11, 13, 15, 17]
print(a[5:1:-1])
print(a[::-1])

# len 응용하여 리스트 전체 가져오기
# a[0:len(a)] 시작 인덱스에 0, 끝 인덱스에 len(a) 지정하여 리스트 전체 가져오기

a = [0, 3, 5, 7, 9, 11, 13, 15, 17]
print(a[0:len(a)]) # 시작 인덱스에 0, 끝 인덱스에 len(a) 지정하여 리스트 전체를 가져옴
print(a[3:len(a)]) # 시작 인덱스에 3, 끝 인덱스에 len(a) 지정하여 리스트 전체를 가져옴
print(a[:len(a)]) # 시작 인덱스 생략, 끝 인덱스에 len(a) 지정하여 리스트 전체를 가져옴
print(a[-5:len(a)])


# 튜플, range, 문자열에 슬라이스 사용하기
# 튜플[시작인덱스:끝인덱스]
# 튜플[시작인덱스:끝인덱스:인덱스증가폭]

b = (0, 10, 20, 30, 40, 50, 60)
print(b[2:5]) # 인덱스 2부터 4까지 요소를 출력
print(b[::4]) # 인덱스 0부터 4씩 증가시키면서 요소를 출력
print(b[4:]) # 인덱스 4부터 마지막 요소까지 출력
print(b[:6:3]) # 튜플 처음부터 인덱스 3씩 증가시키면서 인덱스 5까지 가져옴


# range객체[시직엔덱스:끝인덱스]
# range객체[시작인덱스:끝인덱스:인덱스증가폭]

r = range(10)
print(r[4:7]) # 인덱스 4부터 6까지 생성하는 ragne 객체 출력
print(r[:7:2])  # 인덱스 0부터 2씩 증가시키면서 인덱스 6까지 숫자 생성하는 range 객체 출력
print(r[4:]) # 인덱스 4부터 9까지 숫자를 생성하는 range 객체 출력
print(list(r[:7:2])) # range 객체를 리스트로 만들려면 list에 넣어야한다.

# 슬라이스에 요소 할당하기
# 시퀀스객체[시작인덱스:끝인덱스] = 시퀀스객체
a = [0, 10, 20, 30, 40, 50, 60]
a[2:5] = ['안녕', '하세요', '감사해요'] # 인덱스 2부터 4까지 요소를 할당
print(a) # 인덱스 2, 3, 4 요소가 변경되는 값으로 출력됨

b = [1, 2, 3, 4, 5, 6]
b[1:4] = ['파이썬'] # 인덱스 1부터 3까지 값 1개를 할당함. 그렇기 때문에 요소의 개수가 줄어듬
print(b)

# 시퀀스객체[시작인덱스:끝인덱스:인덱스증가폭] = 시퀀스객체
c = [0, 10, 20, 30, 40, 50 ,60, 70]
c[2:7:2] = ['a', 'b', 'c']
print(c)


# del로 슬라이스 삭제하기
# del 시퀀스객체[시작인덱스:끝인덱스]

a = [0, 2, 4, 6, 8]
del a[2:5]
print(a)

b = [0, 10, 20 ,30 ,40 ,50 ,60 ,70 ,80 ,90 ,100]
del b[1:10:3] # 인덱스 1부터 3씩 증가시키면서 인덱스 9까지 값을 삭제함.
print(b)