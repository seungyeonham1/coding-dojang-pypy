
# 파이썬은 함수(Function)라는 기능을 제공함, 특정 용도의 코드를 한 곳에 모아 놓은 것을 뜻함

# 함수 사용 시, 코드의 용도를 구분할 수 있음, 코드를 재사용할 수 있음, 실수를 줄 일 수 있음

# 함수
# def 함수이름 ():    def는 define(정의하다)에서 따온 키워드
#   코드


# 함수 만들기
def hello():
    print('hello, world!')

# 함수 호출하기 = 함수를 사용하는 방법
hello()

# 함수의 실행 순서
# 1. 파이썬 스크립트 최초 실행
# 2. hello 함수 호출
# 3. hello 함수 실행
# 4. print 함수 실행 및 'Hello, world!' 출력
# 5. hello 함수 종료
# 6. 파이썬 스크립트 종료

# 함수 작성과 호출 순서
# 함수를 만들기 전에 함수를 먼저 호출하면 안됨.

# 예시

# hello() # 이렇게 함수를 먼저 호출하면 안됨
# def hello():
#     print('Hello, world!')


# 빈 함수 만들기
# 내용이 없는 빈 함수를 만들 때는 코드 부분에 pass를 넣어줌

#def hello():
#    pass # pass는 아무 일을 하지 않아도 함수의 틀을 유지할 필요가 있을 때 사용


# 함수에서 값을 받을려면 괄호()안에 변수 이름을 지정해줌. 이 변수를 매개 변수(parameter)라고 부름
# 양식
# def 함수이름(매개변수1, 매개변수2)
#     코드

# 덧셈 함수 

def add(a, b):
    """ 이 함수는 a와 b를 더하는 함수입니다. """
    print(a + b)

add(10, 20)


# 함수 독스트링 사용하기
# 함수의 콜론 바로 다음줄 큰따옴표 세 개(""" """)로 문자열을 입력하면 함수에 대한 설명을 넣을 수 있음.

# def 함수이름(매개변수):
#     """" 독스트링 """
#     코드

# def 함수이름(매개변수):
#     """
#     여러 줄로 된
#     독스트링
#     """
#     코드


def add(a, b):
    """이 함수는 a와 b를 더한 뒤, 결과를 반환하는 함수입니다."""
    return a + b

x = add(10, 20) # 함수를 호출해도 독스트링은 출력되지 않음
print(x)

print(add.__doc__) # 함수의 __doc__으로 독스트링 출력

# help 함수는 함수의 이름, 함수의 매개변수, 독스트링을 도움말 형태로 출력함 
help(add) 


# 함수의 결과를 반환하기

# def 함수이름(매개변수):
#     return 반환값

def add (a, b):
    return a + b

x = add(40,50)

# 반환 값은 변수에 저장하지 않고 바로 다음 함수에 넣을 수 있음.
print((add(40, 50)))


# 매개변수는 없고 반환값만 있는 함수
# 함수를 만들 때, 매개변수는 없지만 값만 반환하는 함수를 만들 수 있음
def one():
    return 1

x = one()
print(x)

# return은 값을 반환하는 기능 외에도 함수 중간에서 바로 빠져나오는 기능도 있음.

def not_ten(a):
    if a == 10:
        return
    print(a, '입니다.', sep = '')

not_ten(5)
not_ten(10)


# 함수에서 값을 여러 개 반환하기

# def 함수이름(매개변수):
#     return 반환값1, 반환값2

def add_sub(a, b):
    return a+b, a-b

# return으로 값을 여러 개 반환하면 실제로는 튜플이 반환됨
x, y = add_sub(30, 50)

# 즉, 튜플이 변수 여러 개에 할당되는 특성을 이용한 것 (언패킹)
print(x, y)


# 값 여러 개를 직접 반환하기
# 함수에서 값 여러 개를 직접 반환할 때는 다음과 같이 return에 튜플을 지정해주면 됨

def one_two():
    return (1, 2)  # return 1, 2와 같음

print(one_two())

# return에서 리스트를 직접 반환해도 됨.
def one_two():
    return [1, 2]

x, y = one_two()

print(x, y)


# 함수의 호출 과정 알아보기
# 함수 여러 개를 만든 뒤, 각 함수의 호출 과정을 스택 다이어그램으로 알아보자.
# 파이썬에서는 접시 쌓기와 방향이 반대, 함수가 아래쪽 방향으로 추가되고, 끝나면 위쪽 방향으로 사라짐

# 프레임 = 메모리에서 함수와 함수에 속한 변수가 저장되는 독립적인 공간
# 스택 프레임 = 스택 안에 있어서 각 프레임을 스택 프레임이라 부름.

def mul(a, b):
    c = a * b
    return c

def add(a, b):
    c = a + b
    print(c)
    d = mul(a, b)
    print(d)

x = 10
y = 20
add(x, y)