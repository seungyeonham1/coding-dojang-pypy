

# 속성에는 클래스 속성과 인스터스 속성 2가지 종류가 있음
# __init__ 메서드는 인스턴스 속성


# 클래스 속성
# 클래스 속성은 클래스에 속해 있으며 모든 인스턴스에서 공유함

#class 클래스이름:
#    속성 = 값

class Person:
    bag = [] # bag 속성

    def put_bag(self, stuff):  # put_bag 메서드
        #self.bag.append(stuff) # self는 현재 인스턴스를 뜻하기 때문에, 클래스 속성을 지칭하기 애매모함
        Person.bag.append(stuff) # 클래스 이름으로 클래스 속성에 접근

james = Person()
james.put_bag('책')

maria = Person()
maria.put_bag('칼')

print(james.bag)
print(maria.bag)
print(Person.bag)


# 속성, 메서드 이름을 찾는 순서
# 파이썬에서는 속성, 메서드 이름을 찾을 때 인스턴스, 클래스 순으로 찾음

# 인스턴스 속성
# 인스턴스 속성은 인스턴스별로 독립되어 있으며 서로 영향을 주지 않음

# 클래스 속성과 인스턴스 속성의 차이
# 클래스 속성 > 모든 인스턴스가 공유. 인스턴스 전체가 사용해야 하는 값을 저장할 때 사용
# 인스턴스 속성 > 인스턴스 별로 독립되어 있음. 각 인스턴스가 값을 따로 저장할 때 사용


# 비공개 클래스 속성 사용하기
# 비공개 클래스 속성은 바깥으로 드러내고 싶지 않은 값에 사용함

# class 클래스이름:
#       __속성 = 값  # 비공개 클래스 속성


# 클래스와 메서드 독스트링 사용하기
# 콜론 (:) 다음 줄에 큰 따옴표 혹은 작은 따옴표 3개로 문자열 입력
# 클래스 독스트링 : 클래스.__doc__
# 메서드 독스트링 : 클래스.메서드__doc__ 혹은 인스턴스.메서드.__doc__

class Person:
    '''사람 클래스 입니다'''

    def greeting(self):
        '''인사 메서드 입니다'''
        print('hello')

print(Person.__doc__) # 사람 클래스 입니다. 
print(Person.greeting.__doc__) # 인사 메서드 입니다.

maria = Person()
print(maria.greeting.__doc__) # 인사 메서드입니다.



# 정적 메서드
# 인스턴스를 거치지 않고 클래스에서 바로 호출할 수 있는 정적 메서드와 클래스 메서드
# 정적 메서드는 매개변수에 self를 지정하지 않음 >> 그렇기 때문에 인스턴스 속성에는 접근할 수 없음
# 정적 메서드는 메서드의 실행이 외부 상태에 영향을 끼치지 않는 '순수 함수'를 만들 때 사용
# 정적 메서드는 인스턴스의 상태를 변화시키자 ㅇㄶ는 메서드를 만들때 사용함.

# class 클래스이름:
#       @staticmethod  # @는 데코레이터라고 하며, 메서드(함수)에 추가 기능을 구현할 때 사용함
#       def 메서드(매개변수1, 매개변수2):
#           코드



# 클래스 메서드
# 클래스.메서드()
# 클래스 메서드는 정적 메서드와 같이 인스턴스 없이 호출할 수 있음.
# 클래스 메서드는 메서드 안에서 클래스 속성, 클래스 메서드에 접근해야할 때 사용

# class 클래스이름:
#       @classmethod
#       def 메서드(cls, 매개변수1, 매개변수2)  #cls는 class의 약자
#           코드

# cls를 사용하면 메서드 안에서 현재 클래스의 인스턴스를 만들 수 있음
# @classmethod
# def create(cls):
#       p = cls()
#       return p